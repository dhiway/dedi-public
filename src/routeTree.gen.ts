/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WatcherImport } from './routes/watcher'
import { Route as RegistriesImport } from './routes/registries'
import { Route as RecordsImport } from './routes/records'
import { Route as RegistriesNamespaceidImport } from './routes/registries.$namespace_id'
import { Route as RecordsNamespaceidRegistryidImport } from './routes/records.$namespace_id.$registry_id'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const WatcherRoute = WatcherImport.update({
  id: '/watcher',
  path: '/watcher',
  getParentRoute: () => rootRoute,
} as any)

const RegistriesRoute = RegistriesImport.update({
  id: '/registries',
  path: '/registries',
  getParentRoute: () => rootRoute,
} as any)

const RecordsRoute = RecordsImport.update({
  id: '/records',
  path: '/records',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const RegistriesNamespaceidRoute = RegistriesNamespaceidImport.update({
  id: '/$namespace_id',
  path: '/$namespace_id',
  getParentRoute: () => RegistriesRoute,
} as any)

const RecordsNamespaceidRegistryidRoute =
  RecordsNamespaceidRegistryidImport.update({
    id: '/$namespace_id/$registry_id',
    path: '/$namespace_id/$registry_id',
    getParentRoute: () => RecordsRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/records': {
      id: '/records'
      path: '/records'
      fullPath: '/records'
      preLoaderRoute: typeof RecordsImport
      parentRoute: typeof rootRoute
    }
    '/registries': {
      id: '/registries'
      path: '/registries'
      fullPath: '/registries'
      preLoaderRoute: typeof RegistriesImport
      parentRoute: typeof rootRoute
    }
    '/watcher': {
      id: '/watcher'
      path: '/watcher'
      fullPath: '/watcher'
      preLoaderRoute: typeof WatcherImport
      parentRoute: typeof rootRoute
    }
    '/registries/$namespace_id': {
      id: '/registries/$namespace_id'
      path: '/$namespace_id'
      fullPath: '/registries/$namespace_id'
      preLoaderRoute: typeof RegistriesNamespaceidImport
      parentRoute: typeof RegistriesImport
    }
    '/records/$namespace_id/$registry_id': {
      id: '/records/$namespace_id/$registry_id'
      path: '/$namespace_id/$registry_id'
      fullPath: '/records/$namespace_id/$registry_id'
      preLoaderRoute: typeof RecordsNamespaceidRegistryidImport
      parentRoute: typeof RecordsImport
    }
  }
}

// Create and export the route tree

interface RecordsRouteChildren {
  RecordsNamespaceidRegistryidRoute: typeof RecordsNamespaceidRegistryidRoute
}

const RecordsRouteChildren: RecordsRouteChildren = {
  RecordsNamespaceidRegistryidRoute: RecordsNamespaceidRegistryidRoute,
}

const RecordsRouteWithChildren =
  RecordsRoute._addFileChildren(RecordsRouteChildren)

interface RegistriesRouteChildren {
  RegistriesNamespaceidRoute: typeof RegistriesNamespaceidRoute
}

const RegistriesRouteChildren: RegistriesRouteChildren = {
  RegistriesNamespaceidRoute: RegistriesNamespaceidRoute,
}

const RegistriesRouteWithChildren = RegistriesRoute._addFileChildren(
  RegistriesRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/records': typeof RecordsRouteWithChildren
  '/registries': typeof RegistriesRouteWithChildren
  '/watcher': typeof WatcherRoute
  '/registries/$namespace_id': typeof RegistriesNamespaceidRoute
  '/records/$namespace_id/$registry_id': typeof RecordsNamespaceidRegistryidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/records': typeof RecordsRouteWithChildren
  '/registries': typeof RegistriesRouteWithChildren
  '/watcher': typeof WatcherRoute
  '/registries/$namespace_id': typeof RegistriesNamespaceidRoute
  '/records/$namespace_id/$registry_id': typeof RecordsNamespaceidRegistryidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/records': typeof RecordsRouteWithChildren
  '/registries': typeof RegistriesRouteWithChildren
  '/watcher': typeof WatcherRoute
  '/registries/$namespace_id': typeof RegistriesNamespaceidRoute
  '/records/$namespace_id/$registry_id': typeof RecordsNamespaceidRegistryidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/records'
    | '/registries'
    | '/watcher'
    | '/registries/$namespace_id'
    | '/records/$namespace_id/$registry_id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/records'
    | '/registries'
    | '/watcher'
    | '/registries/$namespace_id'
    | '/records/$namespace_id/$registry_id'
  id:
    | '__root__'
    | '/'
    | '/records'
    | '/registries'
    | '/watcher'
    | '/registries/$namespace_id'
    | '/records/$namespace_id/$registry_id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  RecordsRoute: typeof RecordsRouteWithChildren
  RegistriesRoute: typeof RegistriesRouteWithChildren
  WatcherRoute: typeof WatcherRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  RecordsRoute: RecordsRouteWithChildren,
  RegistriesRoute: RegistriesRouteWithChildren,
  WatcherRoute: WatcherRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/records",
        "/registries",
        "/watcher"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/records": {
      "filePath": "records.tsx",
      "children": [
        "/records/$namespace_id/$registry_id"
      ]
    },
    "/registries": {
      "filePath": "registries.tsx",
      "children": [
        "/registries/$namespace_id"
      ]
    },
    "/watcher": {
      "filePath": "watcher.tsx"
    },
    "/registries/$namespace_id": {
      "filePath": "registries.$namespace_id.tsx",
      "parent": "/registries"
    },
    "/records/$namespace_id/$registry_id": {
      "filePath": "records.$namespace_id.$registry_id.tsx",
      "parent": "/records"
    }
  }
}
ROUTE_MANIFEST_END */
