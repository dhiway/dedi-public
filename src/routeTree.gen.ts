/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as WatcherRouteImport } from './routes/watcher'
import { Route as RegistriesRouteImport } from './routes/registries'
import { Route as RecordsRouteImport } from './routes/records'
import { Route as RegistriesNamespace_idRouteImport } from './routes/registries.$namespace_id'
import { Route as RecordsNamespace_idRegistry_nameRouteImport } from './routes/records.$namespace_id.$registry_name'

const IndexLazyRouteImport = createFileRoute('/')()

const WatcherRoute = WatcherRouteImport.update({
  id: '/watcher',
  path: '/watcher',
  getParentRoute: () => rootRouteImport,
} as any)
const RegistriesRoute = RegistriesRouteImport.update({
  id: '/registries',
  path: '/registries',
  getParentRoute: () => rootRouteImport,
} as any)
const RecordsRoute = RecordsRouteImport.update({
  id: '/records',
  path: '/records',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const RegistriesNamespace_idRoute = RegistriesNamespace_idRouteImport.update({
  id: '/$namespace_id',
  path: '/$namespace_id',
  getParentRoute: () => RegistriesRoute,
} as any)
const RecordsNamespace_idRegistry_nameRoute =
  RecordsNamespace_idRegistry_nameRouteImport.update({
    id: '/$namespace_id/$registry_name',
    path: '/$namespace_id/$registry_name',
    getParentRoute: () => RecordsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/records': typeof RecordsRouteWithChildren
  '/registries': typeof RegistriesRouteWithChildren
  '/watcher': typeof WatcherRoute
  '/registries/$namespace_id': typeof RegistriesNamespace_idRoute
  '/records/$namespace_id/$registry_name': typeof RecordsNamespace_idRegistry_nameRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/records': typeof RecordsRouteWithChildren
  '/registries': typeof RegistriesRouteWithChildren
  '/watcher': typeof WatcherRoute
  '/registries/$namespace_id': typeof RegistriesNamespace_idRoute
  '/records/$namespace_id/$registry_name': typeof RecordsNamespace_idRegistry_nameRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/records': typeof RecordsRouteWithChildren
  '/registries': typeof RegistriesRouteWithChildren
  '/watcher': typeof WatcherRoute
  '/registries/$namespace_id': typeof RegistriesNamespace_idRoute
  '/records/$namespace_id/$registry_name': typeof RecordsNamespace_idRegistry_nameRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/records'
    | '/registries'
    | '/watcher'
    | '/registries/$namespace_id'
    | '/records/$namespace_id/$registry_name'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/records'
    | '/registries'
    | '/watcher'
    | '/registries/$namespace_id'
    | '/records/$namespace_id/$registry_name'
  id:
    | '__root__'
    | '/'
    | '/records'
    | '/registries'
    | '/watcher'
    | '/registries/$namespace_id'
    | '/records/$namespace_id/$registry_name'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  RecordsRoute: typeof RecordsRouteWithChildren
  RegistriesRoute: typeof RegistriesRouteWithChildren
  WatcherRoute: typeof WatcherRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/watcher': {
      id: '/watcher'
      path: '/watcher'
      fullPath: '/watcher'
      preLoaderRoute: typeof WatcherRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/registries': {
      id: '/registries'
      path: '/registries'
      fullPath: '/registries'
      preLoaderRoute: typeof RegistriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/records': {
      id: '/records'
      path: '/records'
      fullPath: '/records'
      preLoaderRoute: typeof RecordsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/registries/$namespace_id': {
      id: '/registries/$namespace_id'
      path: '/$namespace_id'
      fullPath: '/registries/$namespace_id'
      preLoaderRoute: typeof RegistriesNamespace_idRouteImport
      parentRoute: typeof RegistriesRoute
    }
    '/records/$namespace_id/$registry_name': {
      id: '/records/$namespace_id/$registry_name'
      path: '/$namespace_id/$registry_name'
      fullPath: '/records/$namespace_id/$registry_name'
      preLoaderRoute: typeof RecordsNamespace_idRegistry_nameRouteImport
      parentRoute: typeof RecordsRoute
    }
  }
}

interface RecordsRouteChildren {
  RecordsNamespace_idRegistry_nameRoute: typeof RecordsNamespace_idRegistry_nameRoute
}

const RecordsRouteChildren: RecordsRouteChildren = {
  RecordsNamespace_idRegistry_nameRoute: RecordsNamespace_idRegistry_nameRoute,
}

const RecordsRouteWithChildren =
  RecordsRoute._addFileChildren(RecordsRouteChildren)

interface RegistriesRouteChildren {
  RegistriesNamespace_idRoute: typeof RegistriesNamespace_idRoute
}

const RegistriesRouteChildren: RegistriesRouteChildren = {
  RegistriesNamespace_idRoute: RegistriesNamespace_idRoute,
}

const RegistriesRouteWithChildren = RegistriesRoute._addFileChildren(
  RegistriesRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  RecordsRoute: RecordsRouteWithChildren,
  RegistriesRoute: RegistriesRouteWithChildren,
  WatcherRoute: WatcherRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
